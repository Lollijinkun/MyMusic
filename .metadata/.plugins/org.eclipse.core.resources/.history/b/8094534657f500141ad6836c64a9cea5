package com.ldw.music.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.ldw.music.R;
import com.ldw.music.activity.IConstants;
import com.ldw.music.db.FavoriteInfoDao;
import com.ldw.music.db.MusicInfoDao;
import com.ldw.music.interfaces.IQueryFinished;
import com.ldw.music.model.MusicInfo;
import com.ldw.music.service.ServiceManager;
import com.ldw.music.uimanager.SlidingDrawerManager;
import com.ldw.music.utils.MusicUtils;
import com.ldw.music.utils.StringHelper;

public class MyAdapter extends BaseAdapter implements IConstants {
	
	// LayoutInflater 用来获取布局文件对象（自定义）
	private LayoutInflater mLayoutInflater;
	private ArrayList<MusicInfo> mMusicList;
	private ServiceManager mServiceManager;
	private SlidingDrawerManager mSdm;

	private int mPlayState, mCurPlayMusicIndex = -1;
//	private IQueryFinished mIQueryFinished;
	private FavoriteInfoDao mFavoriteDao;
	private MusicInfoDao mMusicDao;
	private int mFrom;
	
	/**
	 * 定义一个包含3个TextView，2个ImageView控件的ViewHolder类
	 * @author 慎之
	 */
	class ViewHolder {
		TextView musicNameTv, artistTv, durationTv;
		ImageView playStateIconIv, favoriteIv;
	}

	public MyAdapter(Context context, ServiceManager sm, SlidingDrawerManager sdm) {
		mLayoutInflater = LayoutInflater.from(context);
		mMusicList = new ArrayList<MusicInfo>();
		this.mServiceManager = sm;
		this.mSdm = sdm;
		mFavoriteDao = new FavoriteInfoDao(context);
		mMusicDao = new MusicInfoDao(context);
	}
	
	/**
	 * 用传入的list和form更新当前的页面数据
	 * @param list
	 * @param from
	 */
	public void setData(List<MusicInfo> list, int from) {
		setData(list);
		this.mFrom = from;
	}

	/**
	 * 用传入的list更新当前页面中的歌曲列表，并按照文件名排序
	 * @param list
	 */
	public void setData(List<MusicInfo> list) {
		mMusicList.clear();
		if (list != null && list.size() > 0) {
			mMusicList.addAll(list);
			// 为list排序
			Collections.sort(mMusicList, comparator);
			//通知界面进行数据刷新
			notifyDataSetChanged();
		}
	}
	
	/**
	 * 刷新正在播放歌曲列表
	 */
	public void refreshPlayingList() {
		if(mMusicList.size() > 0) {
			mServiceManager.refreshMusicList(mMusicList);
		}
	}
	
	/**
	 * 刷新列表中的歌曲的收藏状态
	 * @param id
	 * @param favorite
	 */
	public void refreshFavoriteById(int id, int favorite) {
		int position = MusicUtils.seekPosInListById(mMusicList, id);
		mMusicList.get(position).favorite = favorite;
		notifyDataSetChanged();
	}
	
	/**
	 * 获取当前页面中的歌曲列表
	 * @return
	 */
	public List<MusicInfo> getData() {
		return mMusicList;
	}

	public void setQueryFinished(IQueryFinished finish) {
		//		mIQueryFinished = finish;
	}
	
	//根据文件名进行排序
	Comparator<MusicInfo> comparator = new Comparator<MusicInfo>() {

		char first_l, first_r;

		@Override
		public int compare(MusicInfo lhs, MusicInfo rhs) {
			first_l = lhs.musicName.charAt(0);
			first_r = rhs.musicName.charAt(0);
			if (StringHelper.checkType(first_l) == StringHelper.CharType.CHINESE) {
				first_l = StringHelper.getPinyinFirstLetter(first_l);
			}
			if (StringHelper.checkType(first_r) == StringHelper.CharType.CHINESE) {
				first_r = StringHelper.getPinyinFirstLetter(first_r);
			}
			if (first_l > first_r) {
				return 1;
			} else if (first_l < first_r) {
				return -1;
			} else {
				return 0;
			}
		}
	};
	
	/**
	 * 设置当前播放的状态以及对于歌曲的ID
	 * @param playState
	 * @param playIndex
	 */
	public void setPlayState(int playState, int playIndex) {
		mPlayState = playState;
		mCurPlayMusicIndex = playIndex;
		notifyDataSetChanged();
	}

	@Override
	public int getCount() {
		return mMusicList.size();
	}
	
	/**
	 * 返回当前位置的MusicInfo对象
	 */
	@Override
	public MusicInfo getItem(int position) {
		return mMusicList.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		final ViewHolder viewHolder;
		final MusicInfo music = getItem(position);
		if (convertView == null) {
			// 如果ConvertView对象为空，需要重新构造一个ConvertView对象并设置其相关属性
			viewHolder = new ViewHolder();
			convertView = mLayoutInflater.inflate(R.layout.musiclist_item, null);
			viewHolder.musicNameTv = (TextView) convertView.findViewById(R.id.musicname_tv);
			viewHolder.artistTv = (TextView) convertView.findViewById(R.id.artist_tv);
			viewHolder.durationTv = (TextView) convertView.findViewById(R.id.duration_tv);
			viewHolder.playStateIconIv = (ImageView) convertView.findViewById(R.id.playstate_iv);
			viewHolder.favoriteIv = (ImageView) convertView.findViewById(R.id.favorite_iv);
			convertView.setTag(viewHolder);
		} else {
			viewHolder = (ViewHolder) convertView.getTag();
		}
		
		if (position != mCurPlayMusicIndex) {
			// 如果不是当前播放的歌曲，移除播放状态的图标
			viewHolder.playStateIconIv.setVisibility(View.GONE);
		} else {
			// 如果是当前播放的歌曲，根据播放状态添加播放或暂停图标
			viewHolder.playStateIconIv.setVisibility(View.VISIBLE);
			if (mPlayState == MPS_PAUSE) {
				//添加暂停图标
				viewHolder.playStateIconIv.setBackgroundResource(R.drawable.list_pause_state);
			} else {
				viewHolder.playStateIconIv.setBackgroundResource(R.drawable.list_play_state);
			}
		}
		
		viewHolder.favoriteIv.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(music.favorite == 1) {
					if(mFrom == START_FROM_FAVORITE) {
						mMusicList.remove(position);
						notifyDataSetChanged();
					}
//					music.favorite = 0;
					mFavoriteDao.deleteById(music._id);
					mMusicDao.setFavoriteStateById(music._id, 0);
					viewHolder.favoriteIv.setImageResource(R.drawable.icon_favourite_normal);
					mMusicList.get(position).favorite = 0;
					mSdm.refreshFavorite(0);
				} else {
//					music.favorite = 1;
					mFavoriteDao.saveMusicInfo(music);
					mMusicDao.setFavoriteStateById(music._id, 1);
					viewHolder.favoriteIv.setImageResource(R.drawable.icon_favourite_checked);
					mMusicList.get(position).favorite = 1;
					mSdm.refreshFavorite(1);
				}
			}
		});
		
		if(music.favorite == 1) {
			viewHolder.favoriteIv.setImageResource(R.drawable.icon_favourite_checked);
		} else {
			viewHolder.favoriteIv.setImageResource(R.drawable.icon_favourite_normal);
		}

		viewHolder.musicNameTv.setText((position + 1) + "." + music.musicName);
		viewHolder.artistTv.setText(music.artist);
		viewHolder.durationTv
				.setText(MusicUtils.makeTimeString(music.duration));

		return convertView;
	}
}
